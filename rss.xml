<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[DODO's DEV LOG]]></title><description><![CDATA[daily life, development, reading, etc.]]></description><link>https://pjaeyoung.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 03 Feb 2021 14:51:46 GMT</lastBuildDate><item><title><![CDATA[01]]></title><description><![CDATA[자바스크립트를 제대로 사용해보고 싶어서 조 모건이 쓴 <자바스크립트 코딩의 기술>을 읽고 있다. 
일주일 간 책 내용 복습 위주로 작성하지 않을까싶다.…]]></description><link>https://pjaeyoung.github.io/Dev/01/</link><guid isPermaLink="false">https://pjaeyoung.github.io/Dev/01/</guid><pubDate>Wed, 03 Feb 2021 22:02:47 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트를 제대로 사용해보고 싶어서 조 모건이 쓴 &lt;u&gt;&amp;#x3C;자바스크립트 코딩의 기술&gt;&lt;/u&gt;을 읽고 있다.
일주일 간 책 내용 복습 위주로 작성하지 않을까싶다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1장 변수 할당으로 의도를 표현하라 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;코드 작성 시 변수 할당이 무수히 많이 일어난다. 내가 오늘 작성한 코드에서 몇 번이나 변수를 할당했는지 기억을 많이 할 수 없을 정도다. 가볍게 스치듯 작성하지만 &lt;strong&gt;가장 많이 작성&lt;/strong&gt;하기에 맨 처음 중요하게 다룬다.&lt;/li&gt;
&lt;li&gt;var는 어휘적 범위(lexical scope), let과 const는 블록 범위(block scope)이다. 블록 범위는 주로 중괄호({}) 안에서 유효한 값으로 취급한다는 의미다. 대표적으로 if문, for문이 있다. &lt;/li&gt;
&lt;li&gt;const를 우선으로 쓰고 필요할 때 let을 쓰는 전략을 추천한다. var는 블록 범위가 없다는 점, 재선언이 가능하고 호이스팅(선언부보다 앞서 접근/사용이 가능) 때문에 수 백줄의 긴 코드에서 값의 변화를 예측하기 어렵게 만든다. &lt;/li&gt;
&lt;li&gt;const는 처음 선언할 때 할당한 값을 유지하기 때문에 코드가 길어져도 그 값을 신경쓰지 않아도 된다(배열의 항목과 객체의 속성값은 예외다). const를 많이 쓰면 그만큼 변화가 일어나는 구간이 좁혀지고 신경써야할 변수의 개수가 줄어들어 결과적으로 버그를 발생할 확률을 줄여준다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2장 배열로 데이터 컬렉션을 관리하라&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최신 자바스크립트에서 다양한 데이터 컬렉션이 추가되었다. 그 중에서도 배열이 가장 많이 쓰이는 컬렉션이다. 값을 추가하고 제거하고 필터링하고 수정하는 기본적인 기능을 자체 배열 메소드에서 제공해준다. &lt;/li&gt;
&lt;li&gt;1장에서 const로 변화를 최소화하는데 배열이 예외가 된다고 말했다. 이 배열을 되도록 처음 상태를 유지하면서 프로그래밍하기 위해서는 &lt;strong&gt;사본&lt;/strong&gt;을 만들어 변형을 일으키는 것이다. 여기서 유용한 최신 문법은 전개연산자(spread operator)다. &lt;/li&gt;
&lt;li&gt;전개연산자는 각 배열의 항목들을 분리하여 가져오는 기능이다. 대괄호([])안에서 특정 배열을 전개연산자와 함께 쓰면 특정 배열의 항목들의 사본들로 구성된 새로운 배열을 반환한다. 전개연산자 개념만 알면 조작(추가/삭제/수정)을 위한 여러 배열 메소드를 기억할 필요 없다(과장하면 전개연산자가 만능키 역할을 한다).변경된 위치가 시각적으로 잘 보여주기 때문에 배열 메소드를 사용한 것보다 직관적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[첫 블로그]]></title><description><![CDATA[개인 블로그 만든 계기 작년에 부트캠프를 다니면서 매주 하나씩 velog에 TWIL을 올렸다.
처음엔 짜집거나 베끼기 정도로 그쳤지만 갈수록 내 말로 풀어서 작성하게 되었다. 글 한 편을 쓰는 데…]]></description><link>https://pjaeyoung.github.io/Daily/첫-블로그-/</link><guid isPermaLink="false">https://pjaeyoung.github.io/Daily/첫-블로그-/</guid><pubDate>Tue, 02 Feb 2021 13:02:39 GMT</pubDate><content:encoded>&lt;h3 id=&quot;개인-블로그-만든-계기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EC%9D%B8-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A0-%EA%B3%84%EA%B8%B0&quot; aria-label=&quot;개인 블로그 만든 계기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개인 블로그 만든 계기&lt;/h3&gt;
&lt;p&gt;작년에 부트캠프를 다니면서 매주 하나씩 velog에 TWIL을 올렸다.
처음엔 짜집거나 베끼기 정도로 그쳤지만 갈수록 내 말로 풀어서 작성하게 되었다. 글 한 편을 쓰는 데 5시간 이상이나 걸렸지만 개념을 단단하게 잡고 간다는 게 느껴졌고 부트캠프가 끝날 때까지 지속적으로 블로깅을 할 수 있었다.&lt;/p&gt;
&lt;p&gt;하지만, 취업 후 바쁘다는 핑계로 블로그를 안 하게 되었다. 당장 눈 앞에 놓인 문제를 해결하느라 여기저기 흩어진 정보를 꾸역꾸역 머릿속에 넣기만 했다. 천천히 음미하여 먹지 못한 지식들은 제대로 소화되지 못한 채 장에 쌓여 탈이 나버렸다.&lt;/p&gt;
&lt;p&gt;나는 누구보다 콧대가 높아야 한다 생각했다. 기본기도 제대로 다지지 않은 상태에서 더 세련된 코드, 멋진 코드를 짜고 싶다는 생각에 사로잡혔다. 여기저기서 주어들은 팁들을 긴 고민 없이 가져다 쓰니 코드가 점점 엉망진창이었다. 퇴사 전 인수인계를 위해 문서화 작업을 하면서 &lt;strong&gt;다른 사람이 이해할 수 있는 코드&lt;/strong&gt; 를 작성하지 못하고 &lt;strong&gt;나만 아는 코드&lt;/strong&gt;를 작성했음을 깨달았다. &lt;strong&gt;기본에 충실하며 조금씩 다듬어가는 과정&lt;/strong&gt;에 익숙해지기 위해 다시 블로깅을 할 마음이 생겼다.&lt;/p&gt;
&lt;p&gt;개발자는 혼자서 개발하는 것이 아니다. 첫 입사 후 한달 정도는 이것저것 묻고 얘기하면서 작업을 했다. 점차 입을 닫고 등을 돌려 작업을 하다보니 프로젝트에 대해 서로 생각한 바가 달라 수정사항이 발생하고 개발 일정에 차질이 생겼다. 열심히 만들어 놓고 다시 수정하는 일이 반복되다보니 의욕이 사라졌다. 얼마 전 들었던 &lt;a href=&quot;https://event-us.kr/FKH3nHkjmPGh/event/28118?state=1&quot;&gt;데브그라운드(한빛미디어 주최 개발강연)&lt;/a&gt; 에서 &lt;strong&gt;회의시간 외에 일상적으로 지속적인 교류&lt;/strong&gt;가 필요하다는 말이 와닿았다.&lt;/p&gt;
&lt;p&gt;소통할 줄 아는 개발자가 되기 위한 첫 걸음은 생각을 정리하고 표현하는 글쓰기라 생각한다. 내가 어떤 사고과정에서 이런 결론에 도달했는지 글로 정리하면 자연스럽게 대화로도 이어진다.&lt;/p&gt;
&lt;p&gt;그래서, 앞으로 블로그를 아래와 같이 진행할 예정이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;블로깅-진행-방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B8%94%EB%A1%9C%EA%B9%85-%EC%A7%84%ED%96%89-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;블로깅 진행 방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;블로깅 진행 방식&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;30일간 매일 작성한다. ( 30일 챌린지를 통해 글쓰기의 거부감을 없앤다.)&lt;/li&gt;
&lt;li&gt;블로깅에 쓸 내용은 복습,프로젝트 진행과정, 문제해결과정, 개발 서적 및 강의 정리로 구성된다. (일상 글이나 개발 외적인 글은 30일 챌린지에 포함하지 않는다.)&lt;/li&gt;
&lt;li&gt;블로깅할 때 가장 중요한 점은 &lt;strong&gt;보지않고 작성하기&lt;/strong&gt; 이다. 내 말로 풀어쓰는 방법 중에 최고다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;br/&gt;
깜빡 잊고 소제목에 대한 설명을 언급하지 않았다. 
왜 있던 velog는 놔두고 개인 블로그를 사용하는가? velog도 딱히 찾아오는 이는 드물다. 보는 이가 적지만 언제든지 노출이 될 가능성이 있다는 점이 마음에 걸렸다. 아직은 내가 쓴 글이 남들에게 보여주기 민망하다고 느끼기 때문에 누가 억지로 내 블로그 링크를 누르지 않는 한 볼 수 없는 조금은 폐쇄적인 개인 블로그에서 글쓰기에 적응하고자 개인 블로그를 만들었다.
&lt;br/&gt;
&lt;br/&gt;
&lt;p&gt;개인 블로그는 한재엽님께서 만들어주신 &lt;a href=&quot;https://github.com/JaeYeopHan/gatsby-starter-bee&quot;&gt;gatsby-starter-bee&lt;/a&gt; 를 바탕으로 손쉽게 만들었다. ‘손쉽게라고 말했지만 처음에 많이 헤맸다. 깃헙페이지로 분명 올렸는데 계속 깃헙 README.md 만 보였다. 알고보니 gatsby-meta-config.js에서 siteUrl을 내 깃헙 url로 변경하지 않았기 때문이었다. 중간 중간 cache나 public 폴더를 삭제하지 않으면 gatsby-meta-config나 styles 수정 사항이 반영되지 않은 경우가 있으니 새로 글을 작성하면 이전 거는 지우고 deploy를 진행해야 했다. velog할 때보다 좀 불편한데(발행 시간 즉 deploy 시간이 길다) 이것도 금방 적응하겠지 하고 첫 블로그 글을 마무리한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[about]]></title><description><![CDATA[Your name Thank you for reading my resume. If you want to contact me, Please send me an email.]]></description><link>https://pjaeyoung.github.io/resume-en/</link><guid isPermaLink="false">https://pjaeyoung.github.io/resume-en/</guid><pubDate>Sun, 27 Jan 2019 16:21:13 GMT</pubDate><content:encoded>&lt;h1 id=&quot;your-name&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#your-name&quot; aria-label=&quot;your name permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Your name&lt;/h1&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;&lt;em&gt;Thank you for reading my resume. If you want to contact me, Please send me an email.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>