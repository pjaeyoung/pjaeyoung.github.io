{"componentChunkName":"component---src-templates-blog-post-js","path":"/challenge30/19/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"bd098a8d-fbe6-56b8-bbb2-93cd68e3daa9","excerpt":"FE 테스트 토요일 오후 1시부터 4시까지 3시간 동안 프로그래머스에서 주최한 FE 과제 전형을 진행했다. \n집중해서 작업해야 하는 시간 만큼 주말인데도 같이 사는 언니를 밖으로 떠밀고 최대한 조용한 환경을 갖추려 했다. \n결론적으로 시간 안에 최소한의 기능도 구현하지 못했다. 완성률은 3…","html":"<h2 id=\"fe-테스트\" style=\"position:relative;\"><a href=\"#fe-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"fe 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FE 테스트</h2>\n<p>토요일 오후 1시부터 4시까지 3시간 동안 프로그래머스에서 주최한 FE 과제 전형을 진행했다.\n집중해서 작업해야 하는 시간 만큼 주말인데도 같이 사는 언니를 밖으로 떠밀고 최대한 조용한 환경을 갖추려 했다.\n결론적으로 시간 안에 최소한의 기능도 구현하지 못했다. 완성률은 30%인 것 같다. 하지만 오랜만에 머리를 싸매고\n코드를 짜니 기분이 좋았다. 미완성이긴 해도 과제에서 요구한 ‘재사용성을 고려한 코드’에 나름대로 근접한 것 같다.\n변경사항이 생길 것으로 여기는 부분들을 모두 외부에서 인자로 전달받는 형태로 구현했다. 비슷한 형태의 UI 컴포넌트를 <code class=\"language-text\">클래스 상속</code>을 적용하였다. 또 외부 API를 요청할 때 응답을 받기 전 loading해야하는 부분을 api 객체가 대신 기억하여 매 호출마다 loading 컴포넌트를 실행하고 중지하도록 했다. </p>\n<h2 id=\"infinite-scroll\" style=\"position:relative;\"><a href=\"#infinite-scroll\" aria-label=\"infinite scroll permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Infinite Scroll</h2>\n<p>스크롤이 끝날 때마다 배열에 들어있는 데이터를 일정 갯수씩 추가적으로 로드하는 기능을 구현하고 있다.\nlazy loading을 구현할 때 썼던 <code class=\"language-text\">IntersectionObserver</code>를 여기서도 사용한다.\n테스트 코드를 짜면서 진행 중인데 바로 코드를 진행하지 않고 테스트부터 짜려니 시간이 오래 걸린다.\n자동으로 어떤 기능들이 있어야 하고 어떤 순서로 실행할 건지 생각하게 만든다. 귀찮지만 이런 습관이 탄탄한 코드를 작성하는 기반이 될 것이다. </p>\n<p>테스트할 때 ‘window’ 환경이 아니라서 <code class=\"language-text\">IntersectionObserver</code>가 undefined 하다는 에러가 났다. 이 경우\n<code class=\"language-text\">beforeEach</code>에서 <code class=\"language-text\">window.IntersectionObserver = jest.fn(function(callback,options){})</code> mock 함수를 생성하고 <code class=\"language-text\">afterEach</code>에서 <code class=\"language-text\">window.IntersectionObserver.mockRestore()</code> mock 함수를 지우면 된다. </p>","frontmatter":{"title":"19","date":"March 07, 2021"}}},"pageContext":{"slug":"/challenge30/19/","previous":{"fields":{"slug":"/challenge30/18/"},"frontmatter":{"title":"18","category":"challenge30","draft":false}},"next":{"fields":{"slug":"/uiux/디자인-실력-높이는-방법/"},"frontmatter":{"title":"디자인 실력 높이는 방법","category":"uiux","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}