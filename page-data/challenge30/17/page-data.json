{"componentChunkName":"component---src-templates-blog-post-js","path":"/challenge30/17/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"af35a76b-3107-5a58-8d4a-940857b71538","excerpt":"FE 과제 도중 만난 헷갈리는 개념 1. Async / Await 함수 정의 시 맨 앞에 를 쓰면  값은  객체다. 직접  객체를 반환하지 않고 일반적인 값 (가령 숫자 10)을 반환하면 이행된  객체로 반환된다.  console.log(returnPromise10()); // Promise{ : 10} 2. Error Handling 미디엄 - Handling Errors in JavaScript: The Definitive Guide 글을 읽고 요약 error를 state…","html":"<h2 id=\"fe-과제-도중-만난-헷갈리는-개념\" style=\"position:relative;\"><a href=\"#fe-%EA%B3%BC%EC%A0%9C-%EB%8F%84%EC%A4%91-%EB%A7%8C%EB%82%9C-%ED%97%B7%EA%B0%88%EB%A6%AC%EB%8A%94-%EA%B0%9C%EB%85%90\" aria-label=\"fe 과제 도중 만난 헷갈리는 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FE 과제 도중 만난 헷갈리는 개념</h2>\n<h3 id=\"1-async--await\" style=\"position:relative;\"><a href=\"#1-async--await\" aria-label=\"1 async  await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Async / Await</h3>\n<ul>\n<li>\n<p>함수 정의 시 맨 앞에 <code class=\"language-text\">async</code>를 쓰면 <code class=\"language-text\">return</code> 값은 <code class=\"language-text\">Promise</code> 객체다. 직접 <code class=\"language-text\">Promise</code> 객체를 반환하지 않고 일반적인 값 (가령 숫자 10)을 반환하면 이행된 <code class=\"language-text\">Promise</code> 객체로 반환된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">returnPromise10</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>console.log(returnPromise10()); // Promise{<fullfilled> : 10}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- `await`은 반드시 `async`와 함께 사용해야 하며 `Promise`가 이행 되기 전까지 코드 진행을 멈춘다. `await`이 속한 함수 내에서 코드가 실행되지 않는다는 말일 뿐 해당 함수 밖의 코드는 계속 실행된다(논블로킹);\n- 스택을 여러 개 쌓아올렸을 때(함수 안에 여러 번 함수를 호출한 경우) 맨 위의 호출된 함수에서 `await`을 사용했다고 해서 중간에 `await`을 빼먹어도 되는 것은 아니다. 앞서 말했든 `await`의 제어 범위는 `await`이 속한 함수 안으로 제한되기 때문이다! \n\n```js\nasync function asyncFunc3() {\n    return new Promise((resolve)=&gt;{\n        setTimeout(()=&gt;resolve(&quot;asyncFunc3&quot;), 2000);\n    }\n    )\n}\n\nasync function asyncFunc2() {\n    const res = await asyncFunc3(); \n    return res + &quot; asyncFunc2&quot;;\n\n}\n\nasync function asyncFunc1() {\n    const res = asyncFunc2(); // 내부 함수 asyncFunc2에서 await을 썼다고 39번째 줄에서 멈추지 않는다. \n    console.log(res + &quot; asyncFunc1&quot;);\n}\n\nasyncFunc1(); // [object Promise] asyncFunc1</code></pre></div>\n<h3 id=\"2-error-handling\" style=\"position:relative;\"><a href=\"#2-error-handling\" aria-label=\"2 error handling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Error Handling</h3>\n<p><a href=\"https://levelup.gitconnected.com/the-definite-guide-to-handling-errors-gracefully-in-javascript-58424d9c60e6\">미디엄 - Handling Errors in JavaScript: The Definitive Guide</a> 글을 읽고 요약</p>\n<ul>\n<li>error를 state로 보관하기 </li>\n<li>\n<p>에러 케이스별 프론트 엔드 대응</p>\n<ul>\n<li>\n<ol>\n<li>글로벌 에러 - 백엔드 : 독립적인 alert ui로 표시됨, </li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>로컬 에러 - 백엔드 : 다른 ui와 같이 사용(가령, input창 아래에 빨간 경고글), 백엔드에서 확인해야만 하는 에러 케이스(가령, 로그인 시 이메일 정보 오류)</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>로컬 에러 - 프론트엔드 : 다른 ui와 같이 사용(가령, input창 아래에 빨간 경고글), 프론트엔드에서 자체 검증가능한 에러(가령, 로그인 시 이메일 양식 오류)</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">try catch</code>문에서 <code class=\"language-text\">console.error</code>는 옛날 방식이다. 디버깅을 위한다면 production에서는 콘솔창에 보이지 않는 <a href=\"https://www.npmjs.com/package/loglevel\">loglevel</a> 을 사용할 것!</li>\n</ul>","frontmatter":{"title":"17","date":"March 03, 2021"}}},"pageContext":{"slug":"/challenge30/17/","previous":{"fields":{"slug":"/challenge30/16/"},"frontmatter":{"title":"16","category":"challenge30","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}