{"componentChunkName":"component---src-templates-blog-post-js","path":"/challenge30/06/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"ee3d2a0f-b6c4-5875-93c2-44e14a1a2d76","excerpt":"<자바스크립트 코딩의 기술> 요약 정리 07장 유연한 함수를 만들어라  개인적으로 가장 습득하고 싶은 고급 기술들(내 기준에서)을 소개하고 있다. 의존성 주입/고차함수(부분적용함수, 커링)는 함수의 재사용성을 높이고 각 함수가 제어해야 할 변수들을 줄여준다.  테스트하기 쉬운 함수란 순수함수 즉, 외부와 소통할 수 있는 유일한 창구인 인자를 가지고 결과물을 반환하는 함수다. 함수 안에서 또 다른 함수를 호출하는 경우가 종종 있는데 이 경우 내부 함수가 외부 api…","html":"<h3 id=\"자바스크립트-코딩의-기술-요약-정리\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BD%94%EB%94%A9%EC%9D%98-%EA%B8%B0%EC%88%A0-%EC%9A%94%EC%95%BD-%EC%A0%95%EB%A6%AC\" aria-label=\"자바스크립트 코딩의 기술 요약 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;자바스크립트 코딩의 기술> 요약 정리</h3>\n<ul>\n<li>\n<p>07장 유연한 함수를 만들어라 </p>\n<ul>\n<li>개인적으로 가장 습득하고 싶은 고급 기술들(내 기준에서)을 소개하고 있다. 의존성 주입/고차함수(부분적용함수, 커링)는 함수의 재사용성을 높이고 각 함수가 제어해야 할 변수들을 줄여준다. </li>\n<li>\n<p>테스트하기 쉬운 함수란 순수함수 즉, 외부와 소통할 수 있는 유일한 창구인 인자를 가지고 결과물을 반환하는 함수다. 함수 안에서 또 다른 함수를 호출하는 경우가 종종 있는데 이 경우 내부 함수가 외부 api를 요청하거나 비동기적으로 작동할 때 테스트를 작성하기가 까다로워진다. </p>\n<ul>\n<li>sinon 라이브러리의 stub, mock, spy 와 같은 헬퍼 함수(jest의 경우 spyOn, fn, mock)를 사용하여 해결한다. </li>\n<li>이보다 더 간단한 방법은 내부에 뒀던 함수를 밖으로 꺼내어 그 결과물을 인자로 받도록 구현하는 것이다. 이를 <strong>의존성 주입</strong> 이라 일컫는다.</li>\n<li>헬퍼 함수를 많이 쓴다는 것은 그만큼 코드가 복잡하고 의존성이 크다는 증거이다. 테스트를 작성하기 전에 코드를 리팩토링해야 할 시점인지 의심해봐야 한다.</li>\n</ul>\n</li>\n<li>\n<p>고차함수는 인자로 함수를 받거나 함수를 반환하는 함수를 일컫는다. 고차함수의 특징을 이용해서 인자들을 받을 시기를 늦출 수 있다. </p>\n<ul>\n<li>부분 적용 함수와 커링은 원래 받아야 할 인자 개수 보다 적은 인자를 받는 함수를 반환하는 함수를 의미한다. 커링은 인자 개수를 하나로 고정하는 특징이 있다. </li>\n<li>만약 같은 인자를 반복적으로 넘겨서 작업하는 함수가 있다면 부분적용 함수나 커링으로 리팩토링해볼 가치가 있다. </li>\n</ul>\n</li>\n<li>자바스크립트에서 this는 문맥에 따라 값이 달라진다. 객체 메서드에서 객체 속성값을 this로 접근한 채 콜백 함수로 넘길 경우 객체 인스턴스의 문맥을 상실하고 global객체(window객체)를 가리키게 되어 오작동을 하게 된다. 이때 콜백 함수를 화살표 함수로 사용하면 바로 상위의 스코프에서 가리키는 this 즉, 객체 인스턴스를 유지한다.  </li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"06","date":"February 10, 2021"}}},"pageContext":{"slug":"/challenge30/06/","previous":{"fields":{"slug":"/challenge30/05/"},"frontmatter":{"title":"05","category":"challenge30","draft":false}},"next":{"fields":{"slug":"/challenge30/07/"},"frontmatter":{"title":"07","category":"challenge30","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}