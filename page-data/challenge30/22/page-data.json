{"componentChunkName":"component---src-templates-blog-post-js","path":"/challenge30/22/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"fde6190f-883c-5d1d-b805-0f86df270963","excerpt":"<리팩토링> 3개월 전에 <리팩토링>을 ebook으로 샀지만 1장만 보고 중도포기했다. ubuntu os…","html":"<h2 id=\"리팩토링\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-label=\"리팩토링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;리팩토링></h2>\n<p>3개월 전에 &#x3C;리팩토링>을 ebook으로 샀지만 1장만 보고 중도포기했다. ubuntu os로 돌아가는 내 노트북에서 볼 수가 없어서 휴대폰 화면으로 봤는데 글씨가 너무 작은 탓에 오래 읽기가 어려웠기 때문이다. 다시 기본기와 내공을 쌓기 위해 도서관에서 이 책을 빌려 읽기 시작했다.</p>\n<p>나는 리팩토링을 클린코드와 같이 바람직한 개발자의 태도라는 관점으로 봤는데 저자는 이를 부정했다. 리팩토링은 경제적인 이유로 반드시 해야 한다고 주장한다. 리팩토링은 코드를 좀 더 읽기 쉽고 수정과 확장 그리고 버그 해결에 용이하기 때문에 마구잡이로 기능을 개발하는 방식보다 시간이 갈수록 프로그램이 커질 때 빠른 속도로 개발이 진행될 수 있게 해준다. 또, 나는 ‘리팩토링 과정에서 코드가 깨질 수 있다’고 오해했다. 저자는 ‘리팩토링은 작동은 그대로지만 내부 구현체를 효율적이고 좋게 개선하는 작업’으로 ‘코드를 수정했다가 깨지는 현상’은 ‘리팩토링 했다고 말 할 수 없다’고 했다. 전 직장에서 대대적으로 코드를 공사했다가 오히려 버그가 생기는 일이 있었는데 그걸 리팩토링했다고 생각한 나를 반성한다.</p>\n<p>나는 처음부터 잘 짜여진 코드를 만들려고 하다가 코드가 복잡해지고 생산력도 떨어지는 경험을 많이 겪었다. 그래서 나에겐 TDD와 Refactoring 이라는 두 무기를 장착하고 당면한 문제를 도려내는 과정이 필요하다. 아주 작은 기능부터 조금씩 적용하는 연습을 많이 해보자.</p>\n<h2 id=\"parallex-scroll-animation\" style=\"position:relative;\"><a href=\"#parallex-scroll-animation\" aria-label=\"parallex scroll animation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parallex Scroll Animation</h2>\n<p>인프런 강좌에서 z-index를 달리하여 마치 3D 공간에 엘리먼트들이 존재하는 것 같은 효과를 보여주는 Parallex Scroll Animation을 알게 되었다.\n스크롤 애니메이션은 스크롤 영역(스크롤하면서 보여줄 엘리먼트들을 고려한 height을 가져야 한다)을 지정할 부모 엘리먼트를 만드는 게 기본이다.\ncss 속성 중 opacity와 visibility는 둘 다 공간 차지는 하나 화면에 나타나지 않는 공통점이 있으나 opacity만 클릭 이벤트가 적용된다는 차이점이 있다.</p>","frontmatter":{"title":"22","date":"March 16, 2021"}}},"pageContext":{"slug":"/challenge30/22/","previous":{"fields":{"slug":"/challenge30/21/"},"frontmatter":{"title":"21","category":"challenge30","draft":false}},"next":{"fields":{"slug":"/uiux/hamburger/"},"frontmatter":{"title":"hamburger","category":"uiux","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}