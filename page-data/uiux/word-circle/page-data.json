{"componentChunkName":"component---src-templates-blog-post-js","path":"/uiux/word-circle/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"126712da-f6bd-5964-b450-57d15fc0f054","excerpt":"저번 rocket loading에서 알게 된 팁들을 활용해서 글자들이 원형으로 돌아가는 애니메이션을 따라 만들었습니다. 글자 수(32자)가 굉장히 많기 때문에 html에 하드 코딩으로는 도저히 못하겠다 싶어 javascript로 태그를 생성하는 방법을 택했습니다. 만드는 과정은 다음과 같습니다. 글자들을 담을 부모 엘리먼트를 하나 만듭니다. 이 부모 엘리먼트가 360도 돌아가도록 할 것입니다. 그 다음 글자 엘리먼트를 생성할 javascript 코드를 작성합니다.\n문자열을 콤마 기준으로 split…","html":"<div style=\"text-align:center;\">\n  <img src=\"https://user-images.githubusercontent.com/47022167/112135107-c35dc580-8c10-11eb-95f5-2d5a4525c69d.gif\" alt=\"circle words\">\n</div>\n<p>저번 <a href=\"https://pjaeyoung.github.io/uiux/rocket_loading/\">rocket loading</a>에서 알게 된 팁들을 활용해서 글자들이 원형으로 돌아가는 애니메이션을 따라 만들었습니다.</p>\n<p>글자 수(32자)가 굉장히 많기 때문에 html에 하드 코딩으로는 도저히 못하겠다 싶어 javascript로 태그를 생성하는 방법을 택했습니다.</p>\n<br/>\n<p>만드는 과정은 다음과 같습니다.</p>\n<br/>\n<p>글자들을 담을 부모 엘리먼트를 하나 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circle-wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이 부모 엘리먼트가 360도 돌아가도록 할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.circle-wrap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> rotateCircle 10s linear infinite<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 10<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> rotateCircle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>360deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그 다음 글자 엘리먼트를 생성할 javascript 코드를 작성합니다.\n문자열을 콤마 기준으로 split하여 배열로 변환한 후 각 문자를 span의 의사 요소 before의 content에 넣기 위해 dataset으로 저장했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> $circleWrap <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.circle-wrap'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> words <span class=\"token operator\">=</span> <span class=\"token string\">'G,E,N,T,L,E,M,A,N,,E,Y,E,,G,L,A,S,S,E,S,,G,E,N,T,L,E,M,A,N,T'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAWord</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> order<span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> $span <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span>\n  $span<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--i'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>order<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  $span<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>before <span class=\"token operator\">=</span> text\n  <span class=\"token keyword\">return</span> $span\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createWords</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">words</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  words<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">word<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    $circleWrap<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">createAWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> order<span class=\"token operator\">:</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> word <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">createWords</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span></code></pre></div>\n<p>사실 처음엔 <code class=\"language-text\">document.createElement</code> 대신 문자열로 태그를 생성하려고 했는데 이상하게도 <code class=\"language-text\">attr(data-before)</code>가 작동이 되지 않았습니다. 원인이 무엇인지 잘 모르겠습니다. 혹시 아는 분이 있으시면 댓글 달아주세요!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createWords</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">words</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $circleWrap<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> words\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">word<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span style=\"--i:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\" data-before:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>word<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>&lt;/span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이번에 새롭게 안 사실인데 style에 —i를 넣어 css에서 var함수와 함께 변수처럼 활용하는 것처럼 <code class=\"language-text\">dataset</code>에 지정한 값도 <code class=\"language-text\">attr()</code>함수로 변수처럼 접근해서 사용할 수 있습니다.</p>\n<p><code class=\"language-text\">window.getComputedStyle( document.querySelector(&#39;someSpanId&#39;), &quot;:before&quot;)</code>\n로 content를 읽는 것은 가능하나 수정은 불가능합니다. 그래서 <code class=\"language-text\">dataset</code>과 <code class=\"language-text\">attr()</code>을 사용해서 동적으로 값을 지정하게 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.circle-wrap span</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>11deg * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.circle-wrap span:before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--font-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>data-before<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>311deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>span의 의사 요소 before에도 <code class=\"language-text\">rotate</code> 시켜줘야합니다. 그렇지 않으면 아래처럼 정갈하지 않은 글자들이 렌더링됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/47022167/112141600-ceb4ef00-8c18-11eb-9709-4532a1f607e4.png\" alt=\"스크린샷, 2021-03-23 20-45-51\"></p>\n<h3 id=\"참고-사이트\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"참고 사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 사이트</h3>\n<p><a href=\"https://youtu.be/ezunNVYPJDs\">Landing Page Design, Mouse scroll slider, Infinite text scrolling, Sidebar menu HTML, CSS &#x26; JQUERY</a></p>","frontmatter":{"title":"word circle","date":"March 23, 2021"}}},"pageContext":{"slug":"/uiux/word-circle/","previous":{"fields":{"slug":"/uiux/rocket_loading/"},"frontmatter":{"title":"rocket_loading","category":"uiux","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}