{"componentChunkName":"component---src-templates-blog-post-js","path":"/uiux/html5-canvas-기초다지기--/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8898b4c1-35c0-5471-91db-dbfc821b0fbd","excerpt":"SPICY YOGHURT님의 GAME DEVELOPMENT TUTORIALS에서 알게 된 Canvas 기본 개념과 사용법을 정리했습니다. 목차 Canvas 기본 다지기 Canvas 란 Canvas 태그 살피기 Javascript로 Canvas 접근하기 Canvas로 도형, 선, 텍스트 그리기 사각형 그리기 패스로 모양 그리기 원 그리기 선 그리기 삼각형 그리기 SVG 경로 그리기 텍스트 그리기 Canvas로 애니메이션 만들기 requestAnimationFrame…","html":"<blockquote>\n<p>SPICY YOGHURT님의 GAME DEVELOPMENT TUTORIALS에서 알게 된 Canvas 기본 개념과 사용법을 정리했습니다.</p>\n</blockquote>\n<h2 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h2>\n<ol>\n<li>\n<p><a href=\"#content1\">Canvas 기본 다지기</a></p>\n<ul>\n<li><a href=\"#content1-1\">Canvas 란</a></li>\n<li><a href=\"#content1-2\">Canvas 태그 살피기</a></li>\n<li><a href=\"#content1-3\">Javascript로 Canvas 접근하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#content2\">Canvas로 도형, 선, 텍스트 그리기</a></p>\n<ul>\n<li><a href=\"#content2-1\">사각형 그리기</a></li>\n<li><a href=\"#content2-2\">패스로 모양 그리기</a></li>\n<li><a href=\"#content2-3\">원 그리기</a></li>\n<li><a href=\"#content2-4\">선 그리기</a></li>\n<li><a href=\"#content2-5\">삼각형 그리기</a></li>\n<li><a href=\"#content2-6\">SVG 경로 그리기</a></li>\n<li><a href=\"#content2-7\">텍스트 그리기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#content3\">Canvas로 애니메이션 만들기</a></p>\n<ul>\n<li><a href=\"#content3-1\">requestAnimationFrame</a></li>\n<li><a href=\"#content3-2\">애니메이션 동작 원리</a></li>\n</ul>\n</li>\n</ol>\n<section>\n<h1 id=\"content1\">1. Canvas 기본 다지기</h1>\n<h2 id=\"content1-1\">Canvas란</h2>\n<ul>\n<li>javascript를 사용해서 도형, 선, 텍스트, 이미지를 그릴 수 있는 그래픽 컨테이너</li>\n<li>기본적으로 <code class=\"language-text\">img</code> 태그처럼 동작하나 <code class=\"language-text\">src</code> 속성을 사용해 외부 소스를 가져오는 <code class=\"language-text\">img</code> 태그와 달리 직접 그림</li>\n<li>최근 브라우저에서는 우클릭으로 <code class=\"language-text\">canvas</code> 태그의 현재 상태의 이미지를 저장할 수 있음</li>\n<li>애니메이션과 게임의 기본 원리는 그리기와 지우기를 빠르게 반복하는 것</li>\n</ul>\n<h2 id=\"content1-2\">Canvas 태그 살피기</h2>\n<ul>\n<li>구 브라우저일 경우를 대비해 <code class=\"language-text\">canvas</code> 태그 사이에 대체 콘텐츠 삽입할 것</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>canvas1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  사용하시는 브라우저가 HTML5 canvas 태그를 지원하지 않습니다.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">width</code>, <code class=\"language-text\">height</code> 속성 선택사항</p>\n<ul>\n<li>미지정시 너비 300, 높이 150 (단위 px)</li>\n<li>css 로도 지정 가능</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"content1-3\">Javascript로 Canvas 접근하기</h2>\n<ul>\n<li><code class=\"language-text\">canvas.getContext('2d')</code>를 사용해서 <code class=\"language-text\">CanvasRenderingContext2D</code> 객체를 얻을 수 있음</li>\n<li><code class=\"language-text\">CanvasRenderingContext2D</code> 객체는 도형, 선, 택스트, 이미지를 그리기 위한 메서드들을 가지고 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span></code></pre></div>\n</section>\n<br>\n<section>\n<h1 id=\"content2\">2. Canvas로 도형, 선, 텍스트 그리기</h1>\n<ul>\n<li>\n<p>캔버스 작업의 작동방식은 (1)스타일을 정의한 후 (2) 채우기 혹은 그리기</p>\n<ul>\n<li>비유하자면 (1) 붓에 물감을 묻히고 (2) 붓으로 모양을 그리기</li>\n</ul>\n</li>\n<li>\n<p>스타일의 경우 단 한 번 지정하면 변경하기 전까지 똑같이 적용됨</p>\n<ul>\n<li>마치 붓 물감을 갈지 않고 계속 그리는 것과 같음\n<img src=\"https://user-images.githubusercontent.com/47022167/113294152-9a84b100-9331-11eb-9767-f1a9b2fbcc07.png\" alt=\"스크린샷, 2021-04-01 21-30-34\"></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token constant\">BLUE</span> <span class=\"token comment\">// 색상을 한 번 지정한 후</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// A</span>\n<span class=\"token comment\">// 색상 변경이 없으면 스타일이 변함없이 적용된다</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//B</span></code></pre></div>\n<h2 id=\"content2-1\">사각형 그리기</h2>\n<ul>\n<li>\n<p>직사각형, 정사각형은 <code class=\"language-text\">fillRect</code>, <code class=\"language-text\">strokeRect</code>를 사용</p>\n<ul>\n<li><code class=\"language-text\">fillRect</code>는 면 색상</li>\n<li><code class=\"language-text\">strokeRect</code>는 선 색상</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"content2-2\">패스로 모양 그리기</h2>\n<ul>\n<li>원, 선, 삼각형 및 기타 여러 모양은 <code class=\"language-text\">path</code>를 사용해서 그릴 수 있음</li>\n<li>공통적으로 <code class=\"language-text\">beginPath()</code>를 호출하여 시작하고 끝낼 때는 <code class=\"language-text\">fill()</code> 혹은 <code class=\"language-text\">stroke()</code>을 호출함</li>\n</ul>\n<h2 id=\"content2-3\"> 원 그리기 </h2>\n<ul>\n<li>\n<p><code class=\"language-text\">arc</code> 함수로 원 모양 그리기</p>\n<ul>\n<li><code class=\"language-text\">context.arc(원중심 x , 원중심 y , 반지름, 시작 라디안 각도, 끝 라디안 각도)</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token constant\">PINK</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>위 코드를 실행했을 때 아래 원본처럼 그려짐</p>\n<ul>\n<li>반지름을 25로 했을 때와 끝 각도를 Math.PI로 했을 때와 함께 비교</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/47022167/113296486-81c9ca80-9334-11eb-8c2e-96931d6ab596.png\" alt=\"스크린샷, 2021-04-01 21-51-57\"></p>\n<h2 id=\"content2-4\"> 선 그리기 </h2>\n<ul>\n<li><code class=\"language-text\">moveTo()</code>로 선 그리기 시작 좌표 설정</li>\n<li><code class=\"language-text\">lineTo()</code>로 선 시작 좌표와 연결시킬 끝 좌표 설정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">context<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token constant\">PINK</span>\ncontext<span class=\"token punctuation\">.</span>lineWidth <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/47022167/113297790-079a4580-9336-11eb-81ac-062d1cce8120.png\" alt=\"스크린샷, 2021-04-01 22-02-52\"></p>\n<h2 id=\"content2-5\"> 삼각형 그리기 </h2>\n<p><img src=\"https://user-images.githubusercontent.com/47022167/113299594-010ccd80-9338-11eb-8fdc-d58495fdba8a.png\" alt=\"스크린샷, 2021-04-01 22-16-58\"></p>\n<ul>\n<li>면을 칠하는 경우 <code class=\"language-text\">lineTo()</code>를 두 번만 호출해도 <code class=\"language-text\">fill()</code>함수가 호출할 때 자동으로 연결됨</li>\n<li>\n<p>선을 칠하는 경우에는 <code class=\"language-text\">lineTo()</code>를 두 번만 호출하면 두 번째 그림처럼 나타남</p>\n<ul>\n<li>삼각형처럼 그리려면 <code class=\"language-text\">lineTo()</code>를 세 번 호출해야 함</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 첫 번째 삼각형</span>\ncontext<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'orange'</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 두 번째 삼각형</span>\ncontext<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token string\">'orange'</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">350</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 세 번째 삼각형</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"content2-6\"> SVG 경로 그리기 </h2>\n<ul>\n<li>복잡한 모양은 툴을 사용해서 SVG로 만든 후 SVG에 들어있는 경로정보를 인자로 <code class=\"language-text\">Path2D</code> 생성자 함수가 반환한 값을 <code class=\"language-text\">stroke()</code>함수에 넘겨주면 됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path2D</span><span class=\"token punctuation\">(</span><span class=\"token string\">'svg 경로'</span><span class=\"token punctuation\">)</span>\n\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"content2-7\"> 텍스트 그리기 </h2>\n<ul>\n<li><code class=\"language-text\">fillText()</code>를 사용해서 텍스트 그릴 수 있음</li>\n<li>특이하게 <code class=\"language-text\">fillStyle</code>로 텍스트 색상을 선택함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span>\ncontext<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">'25px Arial'</span>\ncontext<span class=\"token punctuation\">.</span>textAlign <span class=\"token operator\">=</span> <span class=\"token string\">'center'</span>\ncontext<span class=\"token punctuation\">.</span>textBaseline <span class=\"token operator\">=</span> <span class=\"token string\">'center'</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Some text'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>텍스트 정렬 방식이 기존에 알던 방식과 정 반대</li>\n<li>textAlign\n<img src=\"https://user-images.githubusercontent.com/47022167/113302497-146d6800-933b-11eb-9b70-282305fa607a.png\" alt=\"스크린샷, 2021-04-01 22-39-02\"></li>\n<li>textBaseline\n<img src=\"https://user-images.githubusercontent.com/47022167/113302980-93fb3700-933b-11eb-8b4d-390eba776f2b.png\" alt=\"스크린샷, 2021-04-01 22-42-33\"></li>\n</ul>\n</section>\n<section>\n<h1 id=\"content3\">Canvas로 애니메이션 만들기</h1>\n<ul>\n<li>\n<p><code class=\"language-text\">canvas</code>에 그려진 모형에 움직임이나 색상 변화 등을 주기 위해서는 변경사항이 발생할 때마다 새롭게 그려줘야 함</p>\n<ul>\n<li>스톱모션(<a href=\"https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%86%B1_%EB%AA%A8%EC%85%98\">stop motion</a>)으로 비유할 수 있음</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"content3-1\">requestAnimationFrame</h2>\n<ul>\n<li><code class=\"language-text\">web api</code>에서 제공하는 <code class=\"language-text\">requestAnimationFrame</code>을 사용해서 새롭게 그릴 부분을 브라우저에 반영함</li>\n<li><code class=\"language-text\">requestAnimationFrame(callback)</code>에서 콜백함수는 반드시 <code class=\"language-text\">requestAnimationFrame</code>을 재귀적으로 호출하도록 해야 함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"content3-2\">애니메이션 동작 원리</h2>\n<figure>\n<img src=\"https://user-images.githubusercontent.com/47022167/113306319-ed189a00-933e-11eb-97ba-9a1ba7819d77.png\" alt=\"animation cycle\">\n<figcaption style=\"text-align:center; color:grey\">출처 : GAME DEVELOPMENT TUTORIALS </figcaption>\n</figure>\n<ul>\n<li>\n<p>애니메이션으로 만들기 위해서는 update, clear, draw 과정을 거쳐야 함</p>\n<ul>\n<li>update : 변경점을 만들기 ex) 좌표값 변경</li>\n<li>clear : 이전에 캔버스에 그려진 것들을 삭제 ex) 이전 좌표값에 그려진 원을 지우기</li>\n<li>draw : 변경점에 맞춰 새로 그리기 ex) 새로운 좌표값에 원 그리기</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> posX <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">let</span> posY <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ncontext<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'pink'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  posX <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  posY <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 캔버스 크기에 속한 모든 모형들 지우기</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span>posX<span class=\"token punctuation\">,</span> posY<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span></code></pre></div>\n<figure style=\"width:100%;border: 1px solid black;\">\n<img src=\"https://user-images.githubusercontent.com/47022167/113308982-abd5b980-9341-11eb-98e4-5c953c13aadb.gif\">\n</figure>\n</section>\n<h3 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h3>\n<p><a href=\"https://spicyyoghurt.com/tutorials/html5-javascript-game-development/setup-html5-canvas-game\">GAME DEVELOPMENT TUTORIALS - by. SPICY YOGHURT</a><br>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/API/Canvas_API/Tutorial/Basic_usage\">MDN - Canvas Tutorial</a></p>","frontmatter":{"title":"HTML5 Canvas 기초다지기","date":"April 01, 2021"}}},"pageContext":{"slug":"/uiux/html5-canvas-기초다지기--/","previous":{"fields":{"slug":"/uiux/<사용자를-생각하게-하지마>-독서-후기/"},"frontmatter":{"title":"<사용자를 생각하게 하지마> 독서 후기","category":"uiux","draft":false}},"next":{"fields":{"slug":"/challenge30/23/"},"frontmatter":{"title":"23","category":"challenge30","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}