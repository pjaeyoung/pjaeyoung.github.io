{"componentChunkName":"component---src-templates-blog-post-js","path":"/naver-special-intensive-class/\"20210810\"/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"e8aee91e-56bc-59cd-9a86-379f479e1bdc","excerpt":"코딩 테스트 알고리즘 풀이 시 정규식을 사용하면 성능에 좋지 않다는 사실을 알았다. 내가 푼 문제가 인자로 주어진 문자열에서 같은 문자가 존재하는 지 확인하는 함수를 만드는 것이었다. 여기서 for문을 돌면서 String.prototype.match 메서드로 같은 문자가 있는 지 검사하도록 했는데, 정규식을 빼놓고 for문을 하나만 돌리니 시간복잡도가 O(n)이라 결론을 내렸다. 하지만 페어분께서 정규식 또한 문자열을 통째로 순회하는 작업이 있으니 O(n…","html":"<h2 id=\"코딩-테스트\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"코딩 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코딩 테스트</h2>\n<ul>\n<li>\n<p>알고리즘 풀이 시 정규식을 사용하면 성능에 좋지 않다는 사실을 알았다.</p>\n<ul>\n<li>내가 푼 문제가 인자로 주어진 문자열에서 같은 문자가 존재하는 지 확인하는 함수를 만드는 것이었다.</li>\n<li>여기서 for문을 돌면서 String.prototype.match 메서드로 같은 문자가 있는 지 검사하도록 했는데, 정규식을 빼놓고 for문을 하나만 돌리니 시간복잡도가 O(n)이라 결론을 내렸다.</li>\n<li>하지만 페어분께서 정규식 또한 문자열을 통째로 순회하는 작업이 있으니 O(n) 보다는 시간복잡도가 크지 않겠느냐고 반문했다.</li>\n<li>코드리뷰가 끝난 후 정규식의 시간복잡도에 대해서 구글링을 했다.</li>\n<li>그 결과 정규식은 하나라도 매칭이 되지 않으면 다시 되돌아가 검사하는 백트레킹을 수행하기 때문에 시간 복잡도가 O(n)을 넘을 거라는 말이 있었다.</li>\n<li>하지만 이메일이나 전화번호 같이 검증할 때는 정규식을 많이 사용하는데, 길이가 짧은 문자열이기에 성능에 큰 영향이 없고 정규식을 쓰지 않으면 코드가 장황해지기 때문에 쓰는 거였다.</li>\n<li>관련 검색어로 Flash Text 라이브러리를 개발한 엔지니어분의 실 경험으로 만 단위가 넘어가는 데이터를 regexp로 한 번 검색하는 데 5일이 걸린다는 얘기를 봤다!!😱(뚜둔) Aho-Corasick 알고리즘과 Trie 자료구조 에서 영감을 받아 각 단어의 문자마다 줄기를 뻗어나가는 dictionary 구조를 잡고 하나라도 일치하지 않으면 건너뛰는 등 효과적인 검색 알고리즘을 소개해줬다. 그림으로 대략 이해는 했지만 실제로 구현하라고 하면 못 하겠다</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"프로젝트-개선\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EC%84%A0\" aria-label=\"프로젝트 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 개선</h2>\n<ul>\n<li>wiki 문서를 어떻게 잘 꾸밀까 하다가 시간이 많이 걸렸다. 본질은 프로젝트 코드를 개선하는 건데 엉뚱한데 공들였다. 반성하자. 내일부터는 본질에 더 집중할 것!</li>\n<li>FolderScreen을 어떻게 하면 비대한 크기를 다이어트시킬 지 고민을 했다. 머릿속에만 두지 않고 글로 작성해보면서 방향을 잡아갔다.\n<img src=\"https://user-images.githubusercontent.com/47022167/128883513-c2c7f971-83d5-4bbb-9da1-528d5f3bea3c.png\" alt=\"스크린샷, 2021-08-10 23-17-54\"></li>\n</ul>\n<h2 id=\"js-면접-대비\" style=\"position:relative;\"><a href=\"#js-%EB%A9%B4%EC%A0%91-%EB%8C%80%EB%B9%84\" aria-label=\"js 면접 대비 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>js 면접 대비</h2>\n<ul>\n<li>호이스팅 개념을 다시 살펴보면서 새롭게 알 게 된 사실이 있다. 그동안 var 만 호이스팅(선언부가 최상위로 끌어올려짐 - 실제로 코드가 물리적으로 위로 올라가는 것이 아니라 인터프리터의 코드 해석 방식이 마치 선언부가 위에 있는 것처럼 한다는 의미, 인터프리터가 코드를 실행하기 전에 선언된 변수와 함수들을 실행컨텍스트의 변수 객체에 저장)이 되고 const, let은 호이스팅하지 않는다라 생각했다. 그런데 v8엔진 내부를 분석한 블로그 글에 따르면 const, let 또한 호이스팅을 하지만 초기화작업(메모리 공간 할당)을 하지 않고 TDZ(temporal Dead Zone)에 영향을 받기 때문에 선언 이전에 접근 시 Reference Error를 낸다고 한다. 😯</li>\n</ul>","frontmatter":{"title":"20210810","date":"August 10, 2021"}}},"pageContext":{"slug":"/naver-special-intensive-class/\"20210810\"/","previous":{"fields":{"slug":"/naver-special-intensive-class/\"20210809\"/"},"frontmatter":{"title":"20210809","category":"naver-special-intensive-class","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}