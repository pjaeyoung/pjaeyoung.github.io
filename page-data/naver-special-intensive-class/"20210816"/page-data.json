{"componentChunkName":"component---src-templates-blog-post-js","path":"/naver-special-intensive-class/\"20210816\"/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a4cf6902-8a2f-52b6-aa38-4e2a5ffe7a48","excerpt":"알고리즘 문제 풀기 compose, pipe 문제 함수의 실행 결과를 다음 함수의 인자로 전달하는 과정을 반복한 후 최종 결과를 리턴하는 함수 reduce, reduceRight를 활용해서 구현 프로젝트 개선 고민 1 - UserFolder 컴포넌트 렌더링 이전 코드는 수정모드여부에 따라 변경되는 부분이 존재한다. 수정모드인 경우, 모든 UserFolder는 삭제 버튼 렌더링 X, 수정 대상인 UserFolder에만 FolderName이 수정가능한 input…","html":"<h2 id=\"알고리즘-문제-풀기\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C-%ED%92%80%EA%B8%B0\" aria-label=\"알고리즘 문제 풀기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 문제 풀기</h2>\n<ul>\n<li>\n<p>compose, pipe 문제</p>\n<ul>\n<li>함수의 실행 결과를 다음 함수의 인자로 전달하는 과정을 반복한 후 최종 결과를 리턴하는 함수</li>\n<li>reduce, reduceRight를 활용해서 구현</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"프로젝트-개선\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EC%84%A0\" aria-label=\"프로젝트 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 개선</h2>\n<h3 id=\"고민-1---userfolder-컴포넌트-렌더링\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EB%AF%BC-1---userfolder-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"고민 1   userfolder 컴포넌트 렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고민 1 - UserFolder 컴포넌트 렌더링</h3>\n<ul>\n<li>\n<p>이전 코드는 수정모드여부에 따라 변경되는 부분이 존재한다.</p>\n<ul>\n<li>수정모드인 경우, 모든 UserFolder는 삭제 버튼 렌더링 X, 수정 대상인 UserFolder에만 FolderName이 수정가능한 input값으로 변경되어야 함</li>\n<li>수정모드가 아닌 경우, 모든 UserFolder는 삭제 버튼을 렌더링, FolderName은 text로 렌더링</li>\n</ul>\n</li>\n<li>재사용성을 위해 composition(합성)을 활용한 것 까진 좋았으나 내가 봐도 코드를 해석하기가 까다롭다. props drilling 현상을 줄이기 위해 따로 컴포넌트로 분리하지 않았는데 분리하는 게 좋겠다.</li>\n<li>클린코드 중에서 function의 flag 파라미터로 if문으로 나누는 대신 두 function으로 나누는 걸 권장했다. 컴포넌트도 하나의 function이니 저 말대로 수정모드의 UserFolder와 일반 UserFolder를 두 가지로 나눠서 렌더링하자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>userFolders<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> folderName<span class=\"token punctuation\">,</span> borderColor <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> FolderSvg <span class=\"token operator\">=</span> FolderSvgs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>TouchableOpacity\n                  activeOpacity<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>editMode <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">}</span>\n                  style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>userFolderLayoutData<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>folderLayout<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n                  onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>editMode <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> <span class=\"token function\">onEditMode</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>FolderSvg borderColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>borderColor<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>FolderName top<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'60%'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'45%'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>folderName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FolderName<span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FolderSvg<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TouchableOpacity<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>editMode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n                  <span class=\"token operator\">&lt;</span>DeleteButton\n                    style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>userFolderLayoutData<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>deleteButtonLayout<span class=\"token punctuation\">}</span>\n                    onPressIn<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">onClickDeleteButton</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>Icon name<span class=\"token operator\">=</span><span class=\"token string\">\"remove\"</span> color<span class=\"token operator\">=</span><span class=\"token string\">\"#fff\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>DeleteButton<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"고민-2---redux-비동기-처리\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EB%AF%BC-2---redux-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC\" aria-label=\"고민 2   redux 비동기 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고민 2 - redux 비동기 처리</h3>\n<ul>\n<li>분류 폴더를 파일시스템과 AsyncStorage 를 둘 다 처리해야 한다.</li>\n<li>문제는 로직이 계속 돌고 도는 무한 순환으로 간다는 점이다.</li>\n<li>\n<p>가령 분류 폴더를 생성하는 기능을 만든다고 하자. 그럼 아래와 같은 로직을 실행한다.</p>\n<ul>\n<li>\n<ol>\n<li>파일시스템으로 내장메모리에 폴더를 생성한다.</li>\n<li>폴더 생성이 실패하면 에러메세지(폴더 생성 실패)를 출력한다. 로직 종료</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>AsyncStorage에 생성된 폴더 정보를 저장한다.</li>\n</ol>\n</li>\n<li>폴더 정보 저장이 실패하면 에러메세지(폴더 생성 실패)를 출력한다.</li>\n<li>\n<p>파일시스템으로 내장메모리 생성한 폴더를 삭제한다.</p>\n<ul>\n<li>생성한 폴더 삭제가 실패하면 에러메세지(폴더 삭제 실패)를 출력한다. => 유저는 폴더 생성을 했는데 삭제 메세지가 출력된다?</li>\n<li>AsyncStorage에 생성된 폴더 정보를 저장한다. (돌고 돈다)</li>\n</ul>\n</li>\n<li>\n<ol start=\"3\">\n<li>성공메세지(폴더 생성 성공)를 출력한다.</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>redux state와 파일시스템, AsyncStorage 모두 동기화 처리를 하기가 까다롭다.</li>\n<li>일단 2번의 경우 파일 시스템으로 삭제했을 때 예외처리를 하지 않았다. 찜찜하다.</li>\n<li>내가 신경써야할 것을 줄이는 방법이 뭐가 있을까 검색했더니 <strong>redux-persist</strong> 를 알게 되었다.</li>\n<li><strong>redux-persist</strong>가 AsyncStorage 동기화처리를 대신해준다. (wow) 내일 적용해봐야지</li>\n</ul>","frontmatter":{"title":"20210816","date":"August 16, 2021"}}},"pageContext":{"slug":"/naver-special-intensive-class/\"20210816\"/","previous":{"fields":{"slug":"/naver-special-intensive-class/\"20210813\"/"},"frontmatter":{"title":"20210813","category":"naver-special-intensive-class","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}