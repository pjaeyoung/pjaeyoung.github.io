{"componentChunkName":"component---src-templates-blog-post-js","path":"/naver-special-intensive-class/\"20210818\"/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"af0f2c3d-df72-5c87-b46b-5aecd008f2ce","excerpt":"프로젝트 개선 Redux가 잘 안 되던 이유 새로 작성했던 redux store를 provider로 제공하지 않았다. (나의 실수) 그리고 예전 redux store 를 넘기는 Provider와 같이 사용하면 작동이 되지 않는다는 걸 알게 되었다. 결국 redux-persist 문제가 아닌 것을 알았다. redux-persist 적용하기 어제와 마찬가지로 reducer안에서 AsyncStorage…","html":"<h2 id=\"프로젝트-개선\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EC%84%A0\" aria-label=\"프로젝트 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 개선</h2>\n<h3 id=\"redux가-잘-안-되던-이유\" style=\"position:relative;\"><a href=\"#redux%EA%B0%80-%EC%9E%98-%EC%95%88-%EB%90%98%EB%8D%98-%EC%9D%B4%EC%9C%A0\" aria-label=\"redux가 잘 안 되던 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux가 잘 안 되던 이유</h3>\n<ul>\n<li>새로 작성했던 redux store를 provider로 제공하지 않았다. (나의 실수)</li>\n<li>그리고 예전 redux store 를 넘기는 Provider와 같이 사용하면 작동이 되지 않는다는 걸 알게 되었다.</li>\n<li>결국 redux-persist 문제가 아닌 것을 알았다.</li>\n</ul>\n<h3 id=\"redux-persist-적용하기\" style=\"position:relative;\"><a href=\"#redux-persist-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"redux persist 적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux-persist 적용하기</h3>\n<ul>\n<li>어제와 마찬가지로 reducer안에서 AsyncStorage를 사용하던 코드를 걷어냈다.</li>\n<li>코드가 한결 깔끔해졌다. 방어코드가 순환회로를 보이는 현상이 없어졌다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// src/shared/store/folderSlice.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createUserFolder <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createAsyncThunk</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>\n  IStoredFolder<span class=\"token punctuation\">,</span>\n  IFolder<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    dispatch<span class=\"token operator\">:</span> AppDispatch\n    rejectValue<span class=\"token operator\">:</span> IError\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'folders/createUserFolder'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>folder<span class=\"token punctuation\">,</span> thunkAPI<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 파일시스템만 에러처리를 하고 곧바로 redux store에 새 state를 반영하기만 하면 된다.</span>\n    <span class=\"token keyword\">await</span> <span class=\"token constant\">FS</span><span class=\"token punctuation\">.</span><span class=\"token function\">createFolder</span><span class=\"token punctuation\">(</span>folder<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>folder<span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token function\">uuidv1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> thunkAPI<span class=\"token punctuation\">.</span><span class=\"token function\">rejectWithValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      errorMessage<span class=\"token operator\">:</span> <span class=\"token string\">'내장메모리에 폴더 생성이 실패했습니다'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>React Native에서 redux-persist를 적용하려면 아래처럼 설정해줘야 한다. (공식문서 참고)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// src/shared/store/index.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore<span class=\"token punctuation\">,</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  persistStore<span class=\"token punctuation\">,</span>\n  persistReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FLUSH</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REHYDRATE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PERSIST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PURGE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REGISTER</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-persist'</span>\n<span class=\"token keyword\">import</span> AsyncStorage <span class=\"token keyword\">from</span> <span class=\"token string\">'@react-native-async-storage/async-storage'</span>\n\n<span class=\"token keyword\">import</span> folderReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./folderSlice'</span>\n<span class=\"token comment\">// React Native는 AsyncStorage를 사용하기 때문에 특별히 지정해줘야 한다.</span>\n<span class=\"token keyword\">const</span> persistConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  storage<span class=\"token operator\">:</span> AsyncStorage<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> folders<span class=\"token operator\">:</span> folderReducer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> persistedReducer <span class=\"token operator\">=</span> <span class=\"token function\">persistReducer</span><span class=\"token punctuation\">(</span>persistConfig<span class=\"token punctuation\">,</span> rootReducer<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// redux-persist에서 사용하는 actions를 무시하도록 설정해야 한다.</span>\n<span class=\"token comment\">// 원래 redux action에는 Non-Serializable Data(Promise, Map/Set 등)을 사용하지 말라고 하나</span>\n<span class=\"token comment\">// 예외를 두고 싶다면 아래처럼 작성해야 한다. redux-persist가 Non-Serializable Data를 action으로 사용하고 있다는 걸 추측할 수 있다.</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  reducer<span class=\"token operator\">:</span> persistedReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">middleware</span><span class=\"token operator\">:</span> getDefaultMiddleware <span class=\"token operator\">=></span>\n    <span class=\"token function\">getDefaultMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      serializableCheck<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        ignoredActions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">FLUSH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REHYDRATE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PERSIST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PURGE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REGISTER</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> persistor <span class=\"token operator\">=</span> <span class=\"token function\">persistStore</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./folderSlice'</span></code></pre></div>\n<ul>\n<li>AsyncStorage에 저장된 state를 삭제하려면 <code class=\"language-text\">persistor.purge()</code> 를 실행하면 된다. 저 코드가 무슨 의미인지 곧바로 해석하기 힘들어서 custom hook에 <code class=\"language-text\">clearAllUserFolders</code> 함수로 감싸서 내보내기 했다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useUserFolders</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 생략 */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clearAllUserFolders</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> persistor<span class=\"token punctuation\">.</span><span class=\"token function\">purge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    userFolders<span class=\"token operator\">:</span> entries<span class=\"token punctuation\">,</span>\n    loading<span class=\"token punctuation\">,</span>\n    error<span class=\"token punctuation\">,</span>\n    addUserFolder<span class=\"token punctuation\">,</span>\n    clearAllUserFolders<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">clearAllUserFolders</code>를 실행하면 extraReducer의 PURGE action으로 들어온다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> folderSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'folders'</span><span class=\"token punctuation\">,</span>\n  initialState<span class=\"token punctuation\">,</span>\n  reducers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">extraReducers</span><span class=\"token operator\">:</span> builder <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PURGE</span><span class=\"token punctuation\">,</span> state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// userFolders 초기화 처리</span>\n      state<span class=\"token punctuation\">.</span>entries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"고민---폴더-생성과-수정-복잡성-완화하기\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EB%AF%BC---%ED%8F%B4%EB%8D%94-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%88%98%EC%A0%95-%EB%B3%B5%EC%9E%A1%EC%84%B1-%EC%99%84%ED%99%94%ED%95%98%EA%B8%B0\" aria-label=\"고민   폴더 생성과 수정 복잡성 완화하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고민 - 폴더 생성과 수정 복잡성 완화하기</h3>\n<ul>\n<li>기존에는 생성과 수정을 한 컴포넌트 내에서 처리하다보니 복잡한 코드가 나왔다.</li>\n<li>기존 코드는 수정용폴더 컴포넌트를 따로 만들었고 수정모드나 생성모드일 때 생성/수정할 위치에 수정용폴더 컴포넌트를 렌더링하는 식으로 구현했다. 생성일 때는 괜찮은데 수정모드일 때는 컴포넌트가 두 개 겹쳐서 렌더링한다는 문제가 있음. 겉 동작은 괜찮지만 실제로는 이상하다</li>\n<li>또, 기존코드는 생성한 폴더 개수만큼 map 메서드를 사용해 렌더링하게 했다. 이부분 때문에 폴더 컴포넌트 자체에 input창을 on/off하는 대신 수정용폴더 컴포넌트를 따로 썼다. 이 과정에서 엄청난 폴더 렌더링 현상이 일어났다. input값 변화를 상위 컴포넌트에서 제어를 했기 때문이다. 그래서 수정용폴더 컴포넌트에만 input값 변화가 일어나도록 범위를 좁혔다.</li>\n<li>\n<p>기존코드의 복잡성을 줄일 수 있는 방법을 3가지 생각해봤다.</p>\n<ul>\n<li>생성모드, 수정모드, 모드 아닌 경우를 각각 나누어 처리하는 방법</li>\n<li>생성/수정모드 , 모드 아닌 경우를 나누어 처리하는 방법</li>\n<li>세 개를 다 합하는 방법</li>\n</ul>\n</li>\n<li>마지막 방법은 미리 폴더컴포넌트들을 다 생성하고 redux에 저장된 폴더 개수만큼만 visible하게 바꾼다. 수정/생성모드에 진입시 폴더 인덱스 위치에 있는 폴더컴포넌트의 input창을 활성화한다. 위 두 방법이 거의 유사한 화면인데 여러 개를 구현하는 소모적인 일이 될 것 같아서 마지막 방법을 적용해볼 생각이다.</li>\n</ul>","frontmatter":{"title":"20210818","date":"August 19, 2021"}}},"pageContext":{"slug":"/naver-special-intensive-class/\"20210818\"/","previous":{"fields":{"slug":"/naver-special-intensive-class/\"20210816\"/"},"frontmatter":{"title":"20210816","category":"naver-special-intensive-class","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}