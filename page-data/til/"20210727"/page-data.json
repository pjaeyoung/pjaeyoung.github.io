{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/\"20210727\"/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"6f3538e8-5139-5980-bdfa-503dc34e0eea","excerpt":"커리어리 습관챌린지…","html":"<h2 id=\"커리어리-습관챌린지-4기\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%A6%AC%EC%96%B4%EB%A6%AC-%EC%8A%B5%EA%B4%80%EC%B1%8C%EB%A6%B0%EC%A7%80-4%EA%B8%B0\" aria-label=\"커리어리 습관챌린지 4기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커리어리 습관챌린지 4기</h2>\n<ul>\n<li>이번주부터 커리어리 글쓰기 습관챌린지를 시작했다. </li>\n<li>꾸준히 기술블로그를 읽되 대충 넘기지 않고 이해가 될 때까지 읽고 소화해서 요약 정리를 하면 머릿속에 오래 남을 거고 이 습관을 강제적으로 푸쉬해줄 동기를 부여해주기 위해 참여했다. </li>\n<li>첫 글은 한창 테스트 코드로 머리를 싸매고 있기 때문에 테스트 코드 작성을 장려하는 글로 시작했다. <a href=\"https://careerly.co.kr/comments/29160?utm_campaign=self-share\">관련 링크</a> </li>\n</ul>\n<h2 id=\"블로그-디자인-변경\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%94%94%EC%9E%90%EC%9D%B8-%EB%B3%80%EA%B2%BD\" aria-label=\"블로그 디자인 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>블로그 디자인 변경</h2>\n<p>다른 개발자분들의 블로그를 보고 내 블로그가 너무 흔해빠진(탬플릿 고대로 가져다 썼기 때문) 디자인이라 약간 손보기로 했다. 검정-흰색의 모노톤으로 싹 바꾸고 싶었으나 일부 디자인(카테고리)이 고쳐지지 않는다. 시간이 오래걸려 여기까지! 조금씩 뜯어고쳐보자. </p>\n<h2 id=\"스캡-프로젝트\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BA%A1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"스캡 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스캡 프로젝트</h2>\n<p>여전히 redux 테스트 코드 작성중이다. jest 유틸리티(spyOn, fn, mock)를 쓰다가 작동이 원하는대로 되지 않길래 <a href=\"https://www.daleseo.com/jest-fn-spy-on/\">DaleSeo님 블로그</a>를 참고하면서 정확한 사용법을 익혔다.   </p>\n<blockquote>\n<p>fn : 가짜 함수를 만들어준다. 콜백함수와 같이 내부적으로 호출여부를 파악하거나 테스트 환경에서 동작하기 어려운 로직을 단순화시키는 용도로 쓰인다.<br>\nspyOn: fn, mock과 달리 가짜 함수로 대체하지 않고 모듈에 들어있는 함수를 추적하기만 한다.<br>\nmock : 덩치가 큰 모듈이 내보내는 함수들을 한 번에 가짜함수로 대신하고 싶을 때 쓴다.  </p>\n</blockquote>\n<p>내 경우 react-native-fs를 사용하는 “fsFunctions”가 redux에서 사용된다. 예제와 달리 depth가 2번 들어간다. “fsFunctions”만 mock하면 될 줄 알았으나 react-native-fs 모듈 임포트 문제가 발생한다. “fsFunctions”처럼 <code class=\"language-text\">jest.mock(\"react-native-fs\")</code> 를 같이 써주기만 하면 해결될까? 아니다. 아래와 같은 에러가 발생한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">jest encountered an unexpected token\nThis usually means that you are trying to <span class=\"token function\">import</span> a <span class=\"token function\">file</span> <span class=\"token function\">which</span> Jest cannot parse, e.g. it's not plain JavaScript.\nBy default, <span class=\"token keyword\">if</span> Jest sees a Babel config, it will use that to transform your files, ignoring <span class=\"token string\">\"node_modules\"</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>이 에러를 해결하는 방법은 <code class=\"language-text\">__mocks__</code> 폴더를 생성하고 <code class=\"language-text\">react-native-fs.ts</code>에 사용할 함수를 모킹해서 내보내기하면 된다. </p>","frontmatter":{"title":"20210727","date":"July 27, 2021"}}},"pageContext":{"slug":"/til/\"20210727\"/","previous":{"fields":{"slug":"/uiux/search-bar-animation/"},"frontmatter":{"title":"search-bar-animation","category":"uiux","draft":false}},"next":{"fields":{"slug":"/til/\"20210728\"/"},"frontmatter":{"title":"20210728","category":"til","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}