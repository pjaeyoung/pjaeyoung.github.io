{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/\"20210729\"/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a3e5809c-25fd-51c8-9b00-70ae4f121287","excerpt":"면접 대비 window 객체와 document 객체의 차이? window 객체는 BOM(Browser Object Model)으로 현재 브라우저 창, 탭을 가리킨다.  document 객체는 DOM(Document Object Model)으로 현재 페이지 문서를 가리킨다. document 객체는 window 객체의 속성 중 하나다. window 객체가 더 상위 개념 window 객체의 높이는 브라우저에서 보여지는 영역이고 document…","html":"<h2 id=\"면접-대비\" style=\"position:relative;\"><a href=\"#%EB%A9%B4%EC%A0%91-%EB%8C%80%EB%B9%84\" aria-label=\"면접 대비 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>면접 대비</h2>\n<ul>\n<li>\n<p>window 객체와 document 객체의 차이?</p>\n<ul>\n<li>window 객체는 BOM(Browser Object Model)으로 현재 브라우저 창, 탭을 가리킨다. </li>\n<li>document 객체는 DOM(Document Object Model)으로 현재 페이지 문서를 가리킨다.</li>\n<li>document 객체는 window 객체의 속성 중 하나다. window 객체가 더 상위 개념</li>\n<li>window 객체의 높이는 브라우저에서 보여지는 영역이고 document의 높이는 (만약 페이지 길이가 브라우저 화면 높이보다 길다면) 브라우저에서 보여지지 않는 영역도 포함된다. </li>\n<li>window와 document가 다룰 수 있는 이벤트가 다르다. 가령 resize 이벤트는 window에서만 사용할 수 있고 DomContentLoaded 이벤트는 document만 사용이 가능하다. </li>\n</ul>\n</li>\n<li>\n<p>cors</p>\n<ul>\n<li>url은 프로토콜 + 호스트 + 포트번호 + 경로 + 쿼리 + 프래그먼트 로 구성되어있다. </li>\n<li>여기서 origin 은 프로토콜 + 호스트 + 포트 번호인데 same origin인지 판별할 때 포트 번호는 생략하는 경우가 많고 브라우저마다 상이하게 판단한다. </li>\n<li>\n<p>대표적으로 preflight 방식이 있다. </p>\n<ul>\n<li>웹에서 fetch 요청을 하면 브라우저는 해당 요청을 곧바로 전달하기 전에 OPTIONS 요청을 먼저 보낸다.(preflight)</li>\n<li>OPTIONS 요청에는 origin 정보와 fetch 요청의 간략한 설명(어떤 HTTP 메서드를 사용하고 header는 어떤 걸 포함하는 지등)을 함께 담아 보낸다. </li>\n<li>서버는 Access-Control-Allow-Origin 정보를 담아 응답한다. </li>\n<li>브라우저는 origin이 Access-Control-Allow-Origin에 부합하는 지 검사하고 부합하면 fetch 요청을 보내고 부합하지 않으면 CORS 에러를 낸다. </li>\n</ul>\n</li>\n<li>simple request 방식은 본 요청을 곧바로 전달하고 응답에 Access-Control-Allow-Origin 정보를 받는 방식인데 조건이 까다로워서 잘 쓰이지 않는다. </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"자기-반성의-시간\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EA%B8%B0-%EB%B0%98%EC%84%B1%EC%9D%98-%EC%8B%9C%EA%B0%84\" aria-label=\"자기 반성의 시간 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자기 반성의 시간</h2>\n<h3 id=\"1-취준-준비\" style=\"position:relative;\"><a href=\"#1-%EC%B7%A8%EC%A4%80-%EC%A4%80%EB%B9%84\" aria-label=\"1 취준 준비 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 취준 준비</h3>\n<ul>\n<li>이력서 지원을 찔끔찔금 했는데 전략을 바꿔야겠다. 동기분께 들어보니 오전시간에 이력서 지원을 하는데 집중했고 오후에는 개발 공부하는 시간으로 뒀다고 한다. </li>\n<li>집중도가 떨어지는 오전시간을 활용한다는 점 그리고 이력서 지원과 개발공부를 철저히 지켜서 정신이 산만해지지 않게 한다는 좋은 전략이다. </li>\n</ul>\n<h3 id=\"2-스캡프로젝트-리팩토링\" style=\"position:relative;\"><a href=\"#2-%EC%8A%A4%EC%BA%A1%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-label=\"2 스캡프로젝트 리팩토링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 스캡프로젝트 리팩토링</h3>\n<ul>\n<li>프로젝트가 끝난지 3주가 지나가는데 리팩토링은 1% 도 안 나갔다. 이력서와 포트폴리오 준비와 대외활동 지원 등으로 핑계를 삼을 수 없을 정도로 심각한 수준! (정신차리자)</li>\n<li>예전에 너무 이론을 deep하게 파서 실전으로 이어지기까지 늦는 문제 때문에 빠르게 개념만 훝고 바로 실전으로 가자는 방식으로 바꿨더니 허술한 코드를 작성하거나 시간이 더 오래 걸린다. </li>\n<li>대표적으로 jest 사용법을 대략적으로 알고 진행했더니 redux 비동기 코드 하나의 테스트 코드 짜는 데 사나흘로 붙잡고 있다.</li>\n<li>\n<p>&#x3C;커리어 스킬> 에서 알려준 학습법을 토대로 jest 공부를 진행해야지. </p>\n<ul>\n<li>\n<ol>\n<li>jest 관련 아티클을 서너 개 준비</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>읽으면서 예제를 안 보고 작성할 수 있을 때까지 반복 연습 </li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>알게 된 내용을 노션과 블로그로 남기기   </li>\n</ol>\n</li>\n</ul>\n</li>\n<li>위 과정이 완료되면 스캡프로젝트에 적용하자. </li>\n<li>\n<p>너무 질질 끄는 느낌이니 강제로 데드라인 세우자. 8월 첫째주 까지 리팩토링은 마무리하도록 한다. </p>\n<ul>\n<li>redux 테스트 코드 작성</li>\n<li>FolderScreen 과 Onboarding 분리 </li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"20210729","date":"July 29, 2021"}}},"pageContext":{"slug":"/til/\"20210729\"/","previous":{"fields":{"slug":"/til/\"20210728\"/"},"frontmatter":{"title":"20210728","category":"til","draft":false}},"next":{"fields":{"slug":"/til/\"20210801\"/"},"frontmatter":{"title":"20210801","category":"til","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}