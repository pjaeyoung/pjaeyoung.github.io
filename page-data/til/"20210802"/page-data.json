{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/\"20210802\"/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"f22ebde4-d1a3-5f0b-a6fb-57ad061fee5e","excerpt":"…","html":"<h2 id=\"커리어리-습관-챌린지\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%A6%AC%EC%96%B4%EB%A6%AC-%EC%8A%B5%EA%B4%80-%EC%B1%8C%EB%A6%B0%EC%A7%80\" aria-label=\"커리어리 습관 챌린지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커리어리 습관 챌린지</h2>\n<ul>\n<li>둘 째주 첫 글은 디버깅에 대한 오해와 올바른 사용법에 대한 내용이다.</li>\n<li>해당 내용은 &#x3C;커리어 스킬> 책에서 발췌했다.</li>\n<li>핵심 문장은 바로 “디버깅을 할 때 디버거를 쓰지 말라” 이다.</li>\n<li>오류가 발생했을 때 앞뒤 맥락없이 무조건 디버거를 쓰는 사람? 바로 나!</li>\n<li>목적도 없이 디버거로 코드 한줄 한줄 따라가며 값의 변화를 추적하다 우연히 잘못된 부분을 찾는다면 다행이다.</li>\n<li>그런데 간헐적으로 발생하는 오류라면 이 방식은 매우 비효율적이다.</li>\n<li>그리고 문제의 원인과 결과 그리고 해결을 명확히 하지 못해 추후에도 비슷한 오류가 생기면 이전에 했던 방식을 반복할 것이다.</li>\n<li>그래서 디버거를 쓰는 대신 논리적으로 가설을 세우고 가설을 검증하기 위한 테스트를 진행할 것을 권장한다.</li>\n<li>디버거는 최후의 보류로 남겨야 한다!</li>\n</ul>\n<h2 id=\"jest-공부\" style=\"position:relative;\"><a href=\"#jest-%EA%B3%B5%EB%B6%80\" aria-label=\"jest 공부 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jest 공부</h2>\n<ul>\n<li>\n<p>Q. 모킹이 무엇인가?</p>\n<ul>\n<li>불확실성과 변동성이 존재하는 외부 환경(Network, I/O)을 통제하고 고차함수의 내부 로직을 단순화하여 테스트하기 용이하게 만들어주기 위해 실제 객체인척하는 가짜 객체를 바꿔치기하는 매커니즘을 제공한다.</li>\n<li>가짜 객체는 내부 구현을 삭제하고 호출 순간을 캡처하여 호출 횟수나 호출시 넘겨준 인자값을 확인할 수 있고 반환값을 지정할 수 있다. 간단히 말하면 내부 구현은 무시한 채 입력과 출력에만 신경을 쓴다.</li>\n</ul>\n</li>\n<li>\n<p>Q. Jest.fn 과 jest.spyOn 과 jest.mock의 차이?</p>\n<ul>\n<li>jest.fn은 가짜 함수</li>\n<li>jest.spyOn은 내부 구현은 그대로 두고 실제 객체의 호출여부를 추적할 수 있게 도와준다.</li>\n<li>jest.mock은 모듈이 가진 모든 함수들을 가짜 함수로 대체한다. 테스트 코드에서 모듈을 모킹하는 방법과 <code class=\"language-text\">__mock__</code> 폴더에 모듈명과 동일한 이름의 파일을 생성하여 쓰는 방법이 있다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"20210802","date":"August 02, 2021"}}},"pageContext":{"slug":"/til/\"20210802\"/","previous":{"fields":{"slug":"/til/\"20210801\"/"},"frontmatter":{"title":"20210801","category":"til","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}