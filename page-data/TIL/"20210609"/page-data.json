{"componentChunkName":"component---src-templates-blog-post-js","path":"/TIL/\"20210609\"/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"da009b0b-7376-5367-8a43-2ee1afe76347","excerpt":"파일시스템 모듈화 작업 완료 공통적으로 반복되는 코드는  에서 처리하도록 함 키보드 완료 버튼 제어방법 리서치  엘리먼트에서 property로  을 받는다는 걸 알게 됨  을  으로 설정하면 ‘완료’ 버튼이 나옴 (겔럭시 노트 10 기준)","html":"<ul>\n<li>\n<p>파일시스템 모듈화 작업 완료</p>\n<ul>\n<li>공통적으로 반복되는 코드는 <code class=\"language-text\">handleAsync</code> 에서 처리하도록 함</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">RNFS</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native-fs'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FILEPATH</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">RNFS</span><span class=\"token punctuation\">.</span>ExternalStorageDirectoryPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/SCCAP</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> handleAsync <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(</span><span class=\"token punctuation\">{</span>\n  onSuccess<span class=\"token punctuation\">,</span>\n  onFailure<span class=\"token punctuation\">,</span>\n  asyncFunction<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">: </span><span class=\"token punctuation\">{</span>\n  onSuccess<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span>\n  onFailure<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span>\n  <span class=\"token function-variable function\">asyncFunction</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    onSuccess <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    onFailure <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nexport const createFolderAsync = ({\n  onSuccess,\n  onFailure,\n  folderName,\n}: {\n  folderName: string\n  onSuccess?: Function\n  onFailure?: Function\n}) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token generic-function\"><span class=\"token function\">handleAsync</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    onSuccess<span class=\"token punctuation\">,</span>\n    onFailure<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">asyncFunction</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">RNFS</span><span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">FILEPATH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>folderName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nexport const deleteFolderAsync = ({\n  folderName,\n  onSuccess,\n  onFailure,\n}: {\n  folderName: string\n  onSuccess?: Function\n  onFailure?: Function\n}) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    onSuccess<span class=\"token punctuation\">,</span>\n    onFailure<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">asyncFunction</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">RNFS</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">FILEPATH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>folderName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nexport const renameFolderAsync = ({\n  oldFolderName,\n  newFolderName,\n  onSuccess,\n  onFailure,\n}: {\n  oldFolderName: string\n  newFolderName: string\n  onSuccess?: Function\n  onFailure?: Function\n}) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    onSuccess<span class=\"token punctuation\">,</span>\n    onFailure<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">asyncFunction</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> existingNewName <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">RNFS</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">FILEPATH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newFolderName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>existingNewName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token constant\">RNFS</span><span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">FILEPATH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newFolderName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">RNFS</span><span class=\"token punctuation\">.</span><span class=\"token function\">readDir</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">FILEPATH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>oldFolderName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n        contents<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n          <span class=\"token constant\">RNFS</span><span class=\"token punctuation\">.</span><span class=\"token function\">moveFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">FILEPATH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newFolderName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> <span class=\"token constant\">RNFS</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">FILEPATH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>oldFolderName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nexport const deleteFileAsync = ({\n  filePath,\n  onSuccess,\n  onFailure,\n}: {\n  filePath: string\n  onSuccess?: Function\n  onFailure?: Function\n}) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    onSuccess<span class=\"token punctuation\">,</span>\n    onFailure<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">asyncFunction</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">RNFS</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nconst extractFileNameFrom = (path: string) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nexport const copyFileAsync = ({\n  originPath,\n  destFolderName,\n  onSuccess,\n  onFailure,\n}: {\n  originPath: string\n  destFolderName: string\n  onSuccess?: Function\n  onFailure?: Function\n}) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    onSuccess<span class=\"token punctuation\">,</span>\n    onFailure<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">asyncFunction</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token constant\">RNFS</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span>\n        originPath<span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">FILEPATH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>destFolderName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">extractFileNameFrom</span><span class=\"token punctuation\">(</span>originPath<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>키보드 완료 버튼 제어방법 리서치</p>\n<ul>\n<li><code class=\"language-text\">TextInput</code> 엘리먼트에서 property로 <code class=\"language-text\">returnKeyType</code> 을 받는다는 걸 알게 됨</li>\n<li><code class=\"language-text\">returnKeyType</code> 을 <code class=\"language-text\">done</code> 으로 설정하면 ‘완료’ 버튼이 나옴 (겔럭시 노트 10 기준)</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"20210609","date":"June 09, 2021"}}},"pageContext":{"slug":"/TIL/\"20210609\"/","previous":{"fields":{"slug":"/TIL/\"20210608\"/"},"frontmatter":{"title":"20210608","category":"TIL","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}