{"componentChunkName":"component---src-templates-blog-post-js","path":"/TIL/\"20210628\"/","result":{"data":{"site":{"siteMetadata":{"title":"DODO's DEV LOG","author":"dodo","siteUrl":"https://pjaeyoung.github.io","comment":{"disqusShortName":"dodo","utterances":"pjaeyoung/dodo-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"f88493ea-9b22-55b4-822f-a17c6b2282bd","excerpt":"스캡 프로젝트 스크린샷 감지 에러 해결을 위해  를 수정했다. 문제는  안에서 수정한 사항은 잘 작동되나 깃헙 레포에 반영이되지 않는다. (.gitignore로 제외시켰기 때문) 이 문제를 해결하는 방법으로 두가지가 존재했다. 하나는  밖으로 해당 모듈 폴더를 옮기고 package.json의 dependencies 경로를  로 변경한 후  한다. 이 방식은 로컬 작업에서만 하고 public repo에 올리지 않는 것을 권장한다. 다른 하나는 해당 모듈이 올려진 깃헙 레포를 fork한 후 fork…","html":"<h2 id=\"스캡-프로젝트\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BA%A1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"스캡 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스캡 프로젝트</h2>\n<ul>\n<li>스크린샷 감지 에러 해결을 위해 <code class=\"language-text\">react-native-detector</code> 를 수정했다.</li>\n<li>문제는 <code class=\"language-text\">node_modules</code> 안에서 수정한 사항은 잘 작동되나 깃헙 레포에 반영이되지 않는다. (.gitignore로 제외시켰기 때문)</li>\n<li>\n<p>이 문제를 해결하는 방법으로 두가지가 존재했다.</p>\n<ul>\n<li>하나는 <code class=\"language-text\">node_modules</code> 밖으로 해당 모듈 폴더를 옮기고 package.json의 dependencies 경로를 <code class=\"language-text\">file:모듈 위치</code> 로 변경한 후 <code class=\"language-text\">yarn install</code> 한다. 이 방식은 로컬 작업에서만 하고 public repo에 올리지 않는 것을 권장한다.</li>\n<li>다른 하나는 해당 모듈이 올려진 깃헙 레포를 fork한 후 fork한 레포를 수정하고 <code class=\"language-text\">yarn add [http://github.com/(username)/(reponame).git](http://github.com/(username)/(reponame).git)</code> 으로 설치한다.\n<a href=\"https://www.imkh.dev/nodejs-modify-modules/\">(참고링크)</a></li>\n</ul>\n</li>\n<li>두 번째 방법을 택해서 해결했다.</li>\n<li>\n<p>미생성된 스크린샷 이미지를 곧바로 가져와 오류를 뱉어냈던 부분</p>\n<ul>\n<li>디버깅으로 확인한 결과 스크린샷 경로에 <code class=\"language-text\">.pending</code> 이 붙어서 결과물을 가져온다는 것을 알게 되었다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/storage/emulated/0/DCIM/Screenshots/.pending-1625469659-Screenshot_20210628-162059_ScCap.jpg\n/storage/emulated/0/DCIM/Screenshots/Screenshot_20210628-162059_ScCap.jpg\n/storage/emulated/0/DCIM/Screenshots/Screenshot_20210628-162059_ScCap.jpg</code></pre></div>\n<ul>\n<li>스크린샷 이미지 경로가 pending이 붙어있을 경우 함수 실행을 중단하여 해결했다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> pendingRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">pending</span><span class=\"token regex-delimiter\">/</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isPendingScreenshotPath</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> pendingRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>이슈사항</strong></p>\n<ul>\n<li>notification을 클릭했을 때 SCCAP이 열리지 않고 갤러리가 열리는 현상</li>\n<li>스크린샷 감지 후 앱실행 기능이 잘 안 됨 ⇒ 스캡앱이 열려있는 상태일 때만 잘 됨</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"비동기-개념-공부\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EA%B0%9C%EB%85%90-%EA%B3%B5%EB%B6%80\" aria-label=\"비동기 개념 공부 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 개념 공부</h2>\n<ul>\n<li>\n<p>동기적 처리는 기능을 완전히 수행, 완료하기 전까지 다음 기능 수행을 연기함</p>\n<ul>\n<li>대표적으로 Alert가 있음.</li>\n<li>Alert는 확인을 누르기 전까지 다음 코드를 진행하지 않음 , 렌더링이 멈춤</li>\n</ul>\n</li>\n<li>\n<p>비동기적 처리는 기능을 완료하기 전에 다음 기능을 수행하는 것이 가능함</p>\n<ul>\n<li>비동기적으로 수행하는 코드는 web api로 넘어가 완료된 작업을 이벤트 큐에 넣고 메인 쓰레드에 쌓인 단일 호출 스택이 비워질 때까지 대기</li>\n<li>메인 쓰레드의 스택이 다 비워지면 이벤트 큐에 들어간 테스크 실행</li>\n<li>대표적으로 fetch api가 있음</li>\n</ul>\n</li>\n<li>\n<p>비동기적 처리는 콜백 패턴과 Promise 패턴 두 가지로 나눠짐</p>\n<ul>\n<li>콜백 패턴 : old style, 대표적인 예로 addEventListener</li>\n<li>Promise는 : new style, 대표적인 예로 fetch , 대기/성공/실패라는 비동기 처리 상태를 나타내는 객체, then/catch 메서드 체이닝을 사용, then은 앞선 비동기적 처리가 성공적일 때 호출되고 catch는 실패했을 때 호출, 에러 핸들링이 용이, 순서대로 진행해야 할 여러 개의 비동기적 처리의 코드 복잡도를 낮추고 읽기 쉽게 함</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"20210628","date":"June 29, 2021"}}},"pageContext":{"slug":"/TIL/\"20210628\"/","previous":{"fields":{"slug":"/TIL/\"20210623\"/"},"frontmatter":{"title":"20210623","category":"TIL","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}